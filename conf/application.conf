
include "backend.conf"

# This is the main configuration file for the application.
# ~~~~~

appName = platops-test-github-secret-scanning

# Default http client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"

# Json error handler
play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.backend.http.JsonErrorHandler"

# Play Modules
play.modules.enabled += "uk.gov.hmrc.platopstestgithubsecretscanning.config.Module"

play.modules.enabled += "uk.gov.hmrc.mongo.play.PlayMongoModule"

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {
  uk.gov.hmrc.platopstestgithubsecretscanning.controllers.MicroserviceHelloWorldController = {
    needsAuth = false
    needsLogging = false
    needsAuditing = false
  }
}

# Microservice specific config

mongodb {
  uri = "mongodb://localhost:27017/platops-test-github-secret-scanning"
}

microservice {
  services {
    auth {
      host = localhost
      port = 8500
    }
  }
}

# Amazon
amazon_oauth_client_id = fake_amazon_oauth_client_id
amazon_oauth_client_secret = fake_amazon_oauth_client_secret
aws_access_key_id = fake_aws_access_key_id
aws_secret_access_key = fake_aws_secret_access_key
aws_session_token = fake_aws_session_token
aws_temporary_access_key_id = fake_aws_temporary_access_key_id
aws_temporary_secret_access_key = fake_aws_temporary_secret_access_key

# Atlassian
atlassian_api_token = fake_atlassian_api_token
atlassian_jwt = fake_atlassian_jwt

# Bitbucket
bitbucket_server_personal_access_token = fake_bitbucket_server_personal_access_token

# GitHub
github_app_installation_access_token = fake_github_app_installation_access_token
github_oauth_access_token = fake_github_oauth_access_token
github_personal_access_token = fake_github_personal_access_token
github_refresh_token = fake_github_refresh_token
github_ssh_private_key = fake_github_ssh_private_key

# Grafana
grafana_cloud_api_key = fake_grafana_cloud_api_key
grafana_cloud_api_token = fake_grafana_cloud_api_token
grafana_project_api_key = fake_grafana_project_api_key
grafana_project_service_account_token = fake_grafana_project_service_account_token

# HashiCorp Vault
hashicorp_vault_batch_token = fake_hashicorp_vault_batch_token
hashicorp_vault_root_service_token = fake_hashicorp_vault_root_service_token
hashicorp_vault_service_token = fake_hashicorp_vault_service_token

# Terraform
terraform_api_token = fake_terraform_api_token1

# JFrog
jfrog_platform_access_token = fake_jfrog_platform_access_token
jfrog_platform_api_key = fake_jfrog_platform_api_key
jfrog_platform_reference_token = fake_jfrog_platform_reference_token

# OpenAI
openai_api_key = fake_openai_api_key

# Postman
postman_api_key = fake_postman_api_key
postman_collection_key = fake_postman_collection_key

# Slack
slack_api_token = fake_slack_api_token
slack_incoming_webhook_url = fake_slack_incoming_webhook_url
slack_workflow_webhook_url = fake_slack_workflow_webhook_url

# Twilio
twilio_access_token = fake_twilio_access_token
twilio_account_sid = fake_twilio_account_sid
twilio_api_key = fake_twilio_api_key


